# 브루트포스 알고리즘
# 모든 경우의 계산을 진행하여 최대값을 구한다.
# 회전과 대칭에 따라 테트로미노 모양은 19개이다.


n, m = map(int, input().split())
board = [list(map(int, input().split())) for _ in range(n)]
tetromino = [
    [(0, 0), (0, 1), (1, 0), (1, 1)],
    [(0, 0), (0, 1), (0, 2), (0, 3)],
    [(0, 0), (1, 0), (2, 0), (3, 0)],
    [(0, 0), (0, 1), (0, 2), (1, 0)],
    [(1, 0), (1, 1), (1, 2), (0, 2)],
    [(0, 0), (1, 0), (1, 1), (1, 2)],
    [(0, 0), (0, 1), (0, 2), (1, 2)],
    [(0, 0), (1, 0), (2, 0), (2, 1)],
    [(2, 0), (2, 1), (1, 1), (0, 1)],
    [(0, 0), (0, 1), (1, 0), (2, 0)],
    [(0, 0), (0, 1), (1, 1), (2, 1)],
    [(0, 0), (0, 1), (0, 2), (1, 1)],
    [(1, 0), (1, 1), (1, 2), (0, 1)],
    [(0, 0), (1, 0), (2, 0), (1, 1)],
    [(1, 0), (0, 1), (1, 1), (2, 1)],
    [(1, 0), (2, 0), (0, 1), (1, 1)],
    [(0, 0), (1, 0), (1, 1), (2, 1)],
    [(1, 0), (0, 1), (1, 1), (0, 2)],
    [(0, 0), (0, 1), (1, 1), (1, 2)]
]


def find(x, y):
    global answer
    for i in range(19): #테트로미노 19가지 모양
        result = 0 # 각 테트로미노의 합산 값을 더함.
        for j in range(4): # 테트로미노는 4개의 블락으로 구성
            try:
                next_x = x + tetromino[i][j][0]  # x 좌표
                next_y = y + tetromino[i][j][1]  # y 좌표
                result += board[next_x][next_y] # 합산 값을 구함
            except IndexError: # 현재 위치에서 테트로미노가 board 밖으로 나가게 된다면 인덱스 에러 발생.
                continue
        answer = max(answer, result) # 최대값을 저장


def solve():
    for i in range(n):
        for j in range(m):
            find(i, j)


answer = 0
solve()
print(answer)

